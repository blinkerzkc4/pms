"""
Django settings for pms_system project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import datetime
import json
import os
import sys
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ROOT_APP_DIR = Path(__file__).resolve().parent
CONFIGS_DIR = os.path.join(ROOT_APP_DIR, "configs")

# Check if config directory exists and create if not
if not os.path.exists(CONFIGS_DIR):
    sys.stdout.write(
        "Couldn't find the configs directory. Creating configs directory...\n"
    )
    sys.stdout.write(f"Configs Directory: {CONFIGS_DIR}\n")
    os.makedirs(CONFIGS_DIR)

CONFIGURATION_FILE_PATHS = {
    "client_urls": os.path.join(CONFIGS_DIR, "client_urls.json"),
    "database_configs": os.path.join(CONFIGS_DIR, "database_configs.json"),
}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "django-insecure-d--+gdxzeh#@5i-gs7o*_*vzgifvs+(h(40z%4lnsc4sy$&_%w"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "0") == "1"
ON_SERVER = os.environ.get("ON_SERVER", "0") == "1"

# Domain and hosting settings
SUPERUSER_DOMAIN = os.environ.get("SUPERUSER_DOMAIN", "system.pms.lgerp.org")
GUNICORN_SOCKET_URL = os.environ.get(
    "GUNICORN_SOCKET_URL", "unix:/run/pms_backend_gunicorn.sock"
)
WEBSOCKET_UNIX_URL = os.environ.get(
    "WEBSOCKET_UNIX_URL", "unix:/run/pms_websocket_daphne.sock"
)
FRONTEND_INTERNAL_URL = os.environ.get("FRONTEND_INTERNAL_URL", "http://localhost:3001")
SITE_HOST = SUPERUSER_DOMAIN


# Other Applications Domains
EOFFICE_API_URL = os.environ.get("EOFFICE_DOMAIN", "eoffice.lgerp.org")
ESERVICE_API_URL = os.environ.get("ESERVICE_DOMAIN", "eservice.pms.lgerp.org")

# Logging settings for production
LOG_FILE = "errors.log"
if ON_SERVER:
    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
                "style": "{",
            },
        },
        "handlers": {
            "file": {
                "level": "ERROR",
                "class": "logging.FileHandler",
                "filename": LOG_FILE,
            },
        },
        "loggers": {
            "django": {
                "handlers": ["file"],
                "level": "ERROR",
                "propagate": True,
            },
        },
    }

ALLOWED_HOSTS = (
    [os.environ["WEBSITE_HOSTNAME"]] if "WEBSITE_HOSTNAME" in os.environ else []
)
additional_hosts = [
    "172.19.0.38",
    "pmsdemonew.pms.lgerp.org",
    "yojana.lmc.lgerp.org",
    "yojana.kathmandu.lgerp.org",
    "janakpurdham.yojana.lgerp.org",
    "rishingmun.yojana.lgerp.org",
    "pms.mithilamun.gov.np",
    "pms.janakpurmun.gov.np",
    "172.19.0.18",
    "127.0.0.1",
    "localhost",
]

if os.path.exists(CONFIGURATION_FILE_PATHS["client_urls"]):
    with open(CONFIGURATION_FILE_PATHS["client_urls"], "r") as f:
        CLIENT_URLS = json.load(f)
else:
    CLIENT_URLS = []

if DEBUG:
    # Adding localhost in development mode.
    additional_hosts.extend(["localhost"])
    import socket

    ip = socket.gethostbyname(socket.gethostname())
    # Adding the local IP address in development mode.
    # sys.stdout.write(f"Local Network Address: http://{ip}:8000\n")

    additional_hosts.append(ip)


ALLOWED_HOSTS.extend(additional_hosts)
ALLOWED_HOSTS.extend(CLIENT_URLS)
if SUPERUSER_DOMAIN:
    ALLOWED_HOSTS.append(SUPERUSER_DOMAIN)


INTERNAL_IPS = ["127.0.0.1", "localhost"]

# Application definition
INSTALLED_APPS = [
    "jazzmin",
    "daphne",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "auditlog",
    "drf_yasg",
    "rest_framework",
    "channels_auth_token_middlewares",
    "rest_framework.authtoken",
    "rest_framework_simplejwt",
    "django_filters",
    "django_inlinecss",
    "core",
    "user",
    "project",
    "employee",
    "base_model",
    "log",
    "project_planning",
    "norm",
    "budget_process",
    "formulate_plan",
    "plan_execution",
    "project_report",
    "uvicorn",
    "pratibedan",
    "notification",
    "app_settings",
    "apps_bridge",
]


DEBUG_TOOLBAR = os.getenv("DEBUG_TOOLBAR", False)


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    # DB Connection Change Middleware
    "core.middlewares.DatabaseRouterMiddleware",
    "core.middlewares.SuperUserOnlyMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Logging Middlewares
    "log.middleware.JWTAuthenticationMiddleware",
    "auditlog.middleware.AuditlogMiddleware",
    "log.middleware.LogMiddleware",
]

CORS_ALLOW_ALL_ORIGINS = True

CSRF_TRUSTED_ORIGINS = []
CSRF_TRUSTED_ORIGINS.extend([f"https://{host}" for host in CLIENT_URLS])

CORS_ALLOWED_ORIGINS = []
CORS_ALLOWED_ORIGINS.extend([f"https://{host}" for host in CLIENT_URLS])

if DEBUG:
    CSRF_TRUSTED_ORIGINS.append("http://localhost:3000")
    CSRF_TRUSTED_ORIGINS.append("http://localhost:5173")
    CORS_ALLOWED_ORIGINS.append("http://localhost:3000")
    CORS_ALLOWED_ORIGINS.append("http://localhost:5173")


if SUPERUSER_DOMAIN:
    CSRF_TRUSTED_ORIGINS.append(f"https://{SUPERUSER_DOMAIN}")


if DEBUG_TOOLBAR:
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE = ["debug_toolbar.middleware.DebugToolbarMiddleware"] + MIDDLEWARE

AUTH_USER_MODEL = "user.User"
ROOT_URLCONF = "pms_system.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "pms_system.wsgi.application"
ASGI_APPLICATION = "pms_system.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("127.0.0.1", 6379)],
        },
    },
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if os.path.exists(CONFIGURATION_FILE_PATHS["database_configs"]):
    with open(CONFIGURATION_FILE_PATHS["database_configs"], "r") as f:
        CLIENT_DATABASES = json.load(f)
else:
    CLIENT_DATABASES = {}

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME"),
        "USER": os.environ.get("DB_USER"),
        "PASSWORD": os.environ.get("DB_PASSWORD"),
        "HOST": os.environ.get("DB_HOST"),
        "PORT": os.environ.get("DB_PORT"),
        "DISABLE_SERVER_SIDE_CURSORS": True,
    },
    # "users": {
    #     "ENGINE": "django.db.backends.postgresql",
    #     "NAME": os.environ.get("USER_DB_NAME"),
    #     "USER": os.environ.get("USER_DB_USER"),
    #     "PASSWORD": os.environ.get("USER_DB_PASSWORD"),
    #     "HOST": os.environ.get("USER_DB_HOST"),
    #     "PORT": os.environ.get("USER_DB_PORT"),
    #     "DISABLE_SERVER_SIDE_CURSORS": True,
    # },
}
DATABASES.update(CLIENT_DATABASES)

DATABASE_ROUTERS = ["core.middlewares.DatabaseRouter"]


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kathmandu"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
MEDIA_URL = "/media/"
# if DEBUG:
STATIC_ROOT = os.environ.get("STATIC_ROOT", os.path.join(BASE_DIR, "static"))
MEDIA_ROOT = os.environ.get("MEDIA_ROOT", os.path.join(BASE_DIR, "media"))
# else:
#     STATIC_ROOT = "/usr/local/share/pms_backend/static/"
#     MEDIA_ROOT = "/usr/local/share/pms_backend/media/"

# SITE_HOST = "http://172.19.0.38:8081"
# SITE_HOST = "http://ec2-3-26-231-241.ap-southeast-2.compute.amazonaws.com"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

JAZZMIN_SETTINGS = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "PMS System",
    # Title on the login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_header": "PMS",
    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_brand": "PMS",
    "copyright": "Tech",
    "dark_mode_theme": "darkly",
}


REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_PERMISSION_CLASSES": [
        "user.permissions.ActiveUserPermission",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    # "DEFAULT_METADATA_CLASS": "drf_auto_endpoint.metadata.AutoMetadata",
    "DATE_INPUT_FORMATS": [
        "%Y-%m-%d",
        "%Y/%m/%d",
    ],
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(days=7),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(days=120),
    "TOKEN_OBTAIN_SERIALIZER": "user.utils.MyTokenObtainPairSerializer",
    "UPDATE_LAST_LOGIN": True,
}

AUDITLOG_INCLUDE_ALL_MODELS = True

AUDITLOG_EXCLUDE_TRACKING_MODELS = ("log", "sessions", "contenttypes", "auth")

AUDITLOG_EXCLUDE_TRACKING_FIELDS = (
    "created_date",
    "updated_date",
)

AUDITLOG_INCLUDE_TRACKING_MODELS = (
    {
        "model": "user.User",
        "exclude_fields": [
            "password",
            "last_login",
            "ip_address",
            "digital_signature_verification_token",
        ],
    },
)

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

DEFAULT_FROM_EMAIL = "no-reply@yojana.lgerp.org"

# SWAGGER_SETTINGS = {"DEFAULT_MODEL_RENDERING": "example"}


REPORT_SETTINGS = {
    "report_models": {
        "consumer_formulation": {
            "app_label": "plan_execution",
            "model": "ConsumerFormulation",
        },
        "probability_study_approve": {
            "app_label": "plan_execution",
            "model": "ProbabilityStudyApprove",
        },
        "opening_contract_account": {
            "app_label": "plan_execution",
            "model": "OpeningContractAccount",
        },
        "user_committee_monitoring": {
            "app_label": "plan_execution",
            "model": "UserCommitteeMonitoring",
        },
        "project_revision": {"app_label": "plan_execution", "model": "ProjectRevision"},
        "project_mobilization": {
            "app_label": "plan_execution",
            "model": "ProjectMobilization",
        },
        "measuring_book": {"app_label": "plan_execution", "model": "MeasuringBook"},
        "project_deadline": {"app_label": "plan_execution", "model": "ProjectDeadline"},
        "comment_and_order": {
            "app_label": "plan_execution",
            "model": "CommentAndOrder",
        },
        "payment_exit_bill": {
            "app_label": "plan_execution",
            "model": "PaymentExitBill",
        },
        "user_committee_project_work_complete": {
            "app_label": "plan_execution",
            "model": "UserCommitteeProjectWorkComplete",
        },
        "estimation_submit_acceptance": {
            "app_label": "plan_execution",
            "model": "EstimationSubmitAcceptance",
        },
        "project_tender": {"app_label": "plan_execution", "model": "ProjectTender"},
        "project_bid_collection": {
            "app_label": "plan_execution",
            "model": "ProjectBidCollection",
        },
        "project_darbhau_bid": {
            "app_label": "plan_execution",
            "model": "ProjectDarbhauBid",
        },
        "project_agreement": {
            "app_label": "plan_execution",
            "model": "ProjectAgreement",
        },
        "project_finished_bail_return": {
            "app_label": "plan_execution",
            "model": "ProjectFinishedBailReturn",
        },
        "deposit_mandate": {"app_label": "plan_execution", "model": "DepositMandate"},
        "institutional_collaboration_nominated_staff": {
            "app_label": "plan_execution",
            "model": "InstitutionalCollaborationNominatedStaff",
        },
        "institutional_collaboration_mandate": {
            "app_label": "plan_execution",
            "model": "InstitutionalCollaborationMandate",
        },
        # Quotation
        "quot_specification": {
            "app_label": "plan_execution",
            "model": "QuotationSpecification",
        },
        "quot_ifp": {
            "app_label": "plan_execution",
            "model": "QuotationInvitationForProposal",
        },
        "quot_sa": {
            "app_label": "plan_execution",
            "model": "QuotationSubmissionApproval",
        },
    }
}
